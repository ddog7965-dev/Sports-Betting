name: NFL Live Hooks — Fully Auto
on:
  schedule:
    - cron: '30 12 * 9-12,1-2'
    - cron: '30 16 * 9-12,1-2'
    - cron: '30 20 * 9-12,1-2'
  workflow_dispatch: {}
permissions:
  contents: write
jobs:
  live:
    runs-on: ubuntu-latest
    env:
      TZ: America/Chicago
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure structure
        run: mkdir -p analyzer data .github/workflows

      - name: requirements.txt (idempotent)
        run: |
          cat > requirements.txt << 'REQ'
          requests
          beautifulsoup4
          REQ

      - name: Ensure live_hooks.py
        run: |
          if [ ! -s analyzer/live_hooks.py ]; then
            echo "from pathlib import Path; Path('data').mkdir(exist_ok=True); print('stub live_hooks present');" > analyzer/live_hooks.py
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Build weekly slate (resilient) → data/nfl_games.csv
        run: |
          python - << 'PY'
          import csv, datetime
          from pathlib import Path
          try:
            import requests
          except Exception:
            requests=None
          out=Path("data/nfl_games.csv"); out.parent.mkdir(exist_ok=True, parents=True)
          rows=[]
          try:
            if requests is None: raise RuntimeError("requests not installed")
            from zoneinfo import ZoneInfo
            tz=ZoneInfo("America/Chicago")
            today=datetime.datetime.now(tz).date()
            target=today + datetime.timedelta(days=(6 - today.weekday()) % 7)
            url=f"https://site.api.espn.com/apis/v2/sports/football/nfl/scoreboard?dates={target.strftime('%Y%m%d')}"
            r=requests.get(url, timeout=20); r.raise_for_status()
            for ev in r.json().get("events", []):
              c=(ev.get("competitions") or [{}])[0]
              comps=c.get("competitors") or []
              if len(comps)!=2: continue
              home=next((t for t in comps if t.get("homeAway")=="home"),None)
              away=next((t for t in comps if t.get("homeAway")=="away"),None)
              if not home or not away: continue
              venue=(c.get("venue") or {}).get("fullName") or ""
              addr=(c.get("venue") or {}).get("address") or {}
              city=", ".join([x for x in [addr.get("city",""), addr.get("state","")] if x]).strip(", ")
              rows.append({"home_team":home["team"]["displayName"],"away_team":away["team"]["displayName"],
                           "venue":venue,"city":city,"kickoff_iso":c.get("date") or ""})
          except Exception as e:
            print(f"[warn] slate fetch failed: {e}")
          with out.open("w", newline="", encoding="utf-8") as f:
            w=csv.DictWriter(f, fieldnames=["home_team","away_team","venue","city","kickoff_iso"])
            w.writeheader(); w.writerows(rows)
          print(f"[ok] wrote {out} with {len(rows)} rows")
          PY

      - name: Ensure injuries CSV
        run: |
          [ -s data/nfl_injuries_rollup.csv ] || echo "team,key_out_count" > data/nfl_injuries_rollup.csv

      - name: Run live adapters (resilient)
        id: hooks
        run: |
          set +e
          python -m analyzer.live_hooks --csv data/nfl_games.csv --out data/nfl_live_bundle.json
          code=$?
          TS=$(date '+%Y%m%d_%H%M')
          [ -s data/nfl_live_bundle.json ] || echo '{}' > data/nfl_live_bundle.json
          cp data/nfl_live_bundle.json "data/nfl_live_bundle_${TS}.json"
          echo "ts=$TS" >> $GITHUB_OUTPUT
          exit 0  # never fail the job

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nfl_live_bundle
          path: |
            data/nfl_games.csv
            data/nfl_live_bundle.json
            data/nfl_live_bundle_${{ steps.hooks.outputs.ts }}.json

      - name: Update README table (resilient)
        run: |
          python - << 'PY'
          import json, re
          from pathlib import Path
          p=Path("data/nfl_live_bundle.json")
          if not p.exists():
            print("[warn] bundle missing"); raise SystemExit(0)
          try:
            obj=json.loads(p.read_text(encoding="utf-8"))
          except Exception:
            obj={}
          def avg_public(ps):
            vals=[]
            for s in ps.values():
              v=s.get("spread_pct_on_favorite")
              if isinstance(v,(int,float)): vals.append(float(v))
            return round(sum(vals)/len(vals),1) if vals else None
          rows=[]
          for k,b in obj.items():
            cons=b.get("consensus",{})
            sp=tot=None
            for v in cons.values():
              if sp is None and isinstance(v.get("spread_num"),(int,float)): sp=v["spread_num"]
              if tot is None and isinstance(v.get("total_num"),(int,float)): tot=v["total_num"]
            pub=avg_public(b.get("public_splits",{}))
            nud=max(-50,min(50,sum(int(n.get("bps",0)) for n in b.get("nudges",[]))))
            rows.append((k,sp,tot,pub,nud))
          header="| Matchup ID | Spread* | Total* | Public% on Fav* | Nudge Sum (bps) |\n|---|---:|---:|---:|---:|"
          def fmt(x): return "—" if x is None else (f"{x:.1f}" if isinstance(x,float) else str(x))
          lines=[header]+[f"| `{k}` | {fmt(sp)} | {fmt(tot)} | {fmt(pub)} | {nud:+d} |" for k,sp,tot,pub,nud in sorted(rows)]
          table="\n".join(lines) if rows else "_no games found_"
          readme=Path("README.md")
          txt=readme.read_text(encoding="utf-8")
          start="<!-- LIVE_BUNDLE:START -->"; end="<!-- LIVE_BUNDLE:END -->"
          if start in txt and end in txt:
            txt=re.sub(f"{start}[\\s\\S]*?{end}", f"{start}\n{table}\n{end}", txt)
          else:
            txt += "\n\n## Live Slate Summary\n" + start + "\n" + table + "\n" + end + "\n"
          readme.write_text(txt, encoding="utf-8")
          print("[ok] README updated")
          PY

      - name: Commit & push outputs + README (always)
        if: always()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md data/nfl_games.csv data/nfl_live_bundle.json data/nfl_live_bundle_*.json analyzer/live_hooks.py requirements.txt || true
          git commit -m "auto: update slate + live bundle + README ($(date -u '+%Y-%m-%d %H:%M UTC'))" || echo "No changes to commit"
          git push || true
